Crio a pasta onde será armezenado o projeto

>>> yarn init -y
>>> yarn add express

// Configurando a estrutura
Crio a pasta src -> Centraliza o código da aplicação

Crio 3 arquivos
 - app.js    -> Configuro o servidor express
 - server.js -> Servidor
 - routes.js -> Rotas

// APP.js
Basicamente crio uma class, que terá que fazer a união e o direcionamento
dos arquivos, para que eles conversem entre si

Exportada a variável server, que recebe express, e é importada dentro de server.js

// Server.js
Controlo o servidor localhost:3333

// Routes.js
Rotas do app

Os arquivos que são importados em algum lugar, devem ser exportados

Classes com o método constructor, devem ser exportadas como new, para invocar o método

// Adicionando o sucrase para o uso de import/export
>>> yarn add sucrase nodemon -D
trocar os const = require por import from
module.exports = passa a se export default

rondando >>> yarn sucrase-node src/server.js
necessário configurar o nodemon(Detecta alterações no código e reinicia o servidor)
no package -> scripts: dev= nodemon src/server.js
BUT, o import e export são funcionalidades do sucrase

Criar um arquivo nodemon.json -> para todo arquivo com extensão js, registra o sucrase 
antes de inicializar a app


// Configurando o debug com sucrase
  adicionado o devDebug ao package json
  criando uma configuração no script de config do debug

/// Docker
Controla os serviços externos da aplicação
Cria ambientes isolados, sem mexer em qualquer arquivo

imagem    -> serviço/ferramentas
container -> instância de uma imagem
Docker Registry(Docker Hub)  -> Nuvem com as imagens do docker

// Postgres
https://hub.docker.com/_/postgres
sudo docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres:11

// POSTBIRD -Interface visual para visualizar o postgres
sudo docker ps -a => exibir os todos os containers
sudo docker start database(nome da imagem)


/// PADRONIZAÇÃO
//ESLINT - com plugin
>>> yarn add eslint -D // Verifica se o código está seguindo o padrão
>>> yarn eslint --init // inicializar arquivo de configuração
      por padrão, é instalado através do npm, q irá criar um arquivo package-lock, apenas deletar

>>> yarn // instalar todas as dependências no yarn.lock

Foi criado um .eslintrc.js -> Configurações do eslint

//Prettier
>>> yarn add prettier eslint-config-prettier eslint-plugin-prettier -D // Integração do prettier com o eslint
crio um arquivo .prettierrc // Sobrescrever algumas das regras de integração do prettier com o eslint

// Aplicando as regras do eslint em vários arquivos
>>> yarn eslint --fix src --ext .js

// EditorConfig -> Caso os devs usem editores diferentes
plugin == editor config
na raiz do projeto, botão direito -> generate.editorconfig
