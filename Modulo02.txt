Crio a pasta onde será armezenado o projeto

>>> yarn init -y
>>> yarn add express

// Configurando a estrutura
Crio a pasta src -> Centraliza o código da aplicação

Crio 3 arquivos
 - app.js    -> Configuro o servidor express
 - server.js -> Servidor
 - routes.js -> Rotas

// APP.js
Basicamente crio uma class, que terá que fazer a união e o direcionamento
dos arquivos, para que eles conversem entre si

Exportada a variável server, que recebe express, e é importada dentro de server.js

// Server.js
Controlo o servidor localhost:3333

// Routes.js
Rotas do app

Os arquivos que são importados em algum lugar, devem ser exportados

// Adicionando o sucrase para o uso de import/export
>>> yarn add sucrase nodemon -D
trocar os const = require por import from
module.exports = passa a se export default

rondando >>> yarn sucrase-node src/server.js
necessário configurar o nodemon(Detecta alterações no código e reinicia o servidor)
no package -> scripts: dev= nodemon src/server.js
BUT, o import e export são funcionalidades do sucrase

Criar um arquivo nodemon.json -> para todo arquivo com extensão js, registra o sucrase
antes de inicializar a app


// Configurando o debug com sucrase
  adicionado o devDebug ao package json
  criando uma configuração no script de config do debug

/// Docker
Controla os serviços externos da aplicação
Cria ambientes isolados, sem mexer em qualquer arquivo

imagem    -> serviço/ferramentas
container -> instância de uma imagem
Docker Registry(Docker Hub)  -> Nuvem com as imagens do docker

// Postgres
https://hub.docker.com/_/postgres
sudo docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres:11

// POSTBIRD -Interface visual para visualizar o postgres
sudo docker ps -a => exibir os todos os containers
sudo docker start database(nome da imagem)


/// PADRONIZAÇÃO
//ESLINT - com plugin
>>> yarn add eslint -D // Verifica se o código está seguindo o padrão
>>> yarn eslint --init // inicializar arquivo de configuração
      por padrão, é instalado através do npm, q irá criar um arquivo package-lock, apenas deletar

>>> yarn // instalar todas as dependências no yarn.lock

Foi criado um .eslintrc.js -> Configurações do eslint

//Prettier
>>> yarn add prettier eslint-config-prettier eslint-plugin-prettier -D // Integração do prettier com o eslint
crio um arquivo .prettierrc // Sobrescrever algumas das regras de integração do prettier com o eslint

// Aplicando as regras do eslint em vários arquivos
>>> yarn eslint --fix src --ext .js

// EditorConfig -> Caso os devs usem editores diferentes
plugin == editor config
na raiz do projeto, botão direito -> generate.editorconfig


// Configurando o sequelize
Crio as pastas config, database/migrations e app/models app/controllers

>>> yarn add sequelize
>>> yarn add sequelize-cli -D //Interface de linha de comando

crio um arquivo de config do sequelize (.sequelizerc)
O arquivo sequelize, a interface não interpreta o import/export, logo os arquivos q ele irá acessar
e os acessados por ele, devem ser através de const/require (commomJs)

//configurando o database
No postgres é necessário instalar 2 dependências
>>> yarn add pg pg-hstore


//Migration de usuário
Usando o sequelize-cli, para facilitar a criação da migration
>>> yarn sequelize migration:create --name=create-users

criado um arquivo na pasta de migrations
método up (quando a migration for executada)
método down (para fazer rollback -Update,deletar a migration)

Defino as especificações de cada campo da tabela

rodando a migration
>>> yarn sequelize db:migrate

no postbird, atualizar o database

>>> yarn sequelize db:migrate:undo //Desfaz a última migrate

/// Criando o model de usuário
Receberá os dados inputados pelo usuário


/// Criando a conexão com o banco de dados (loader de models)
dentro de database criar o arquivo index.js
No arquivo index.js, será criada uma variável responsável pela conexão
essa variável será esperada dentro dos Models

Crio um array com todos os models, esse array será percorrido e terá uma modificação
e será retornado com o valor modificado

Preciso chamar o arquivo de database no app.js
rodo o servidor, e ao acessar o localhost:3333, será armazenado no database


/// Feature de criação do usuário - Registro de usuário dentro da API
Crio um controller, para a criação do usuario, que receberá as informações através do req.body
Valido se o email é único, e retorno os valores

através das rotas, eu importo o controller


/// Gerando o hash da password == criptografando
>>> yarn add bcryptjs

No model de usuário, criar um campo virtual



/*** Conceitos JWT ***/
Json Web Token
Passo os dados para autenticação, a rota busca as informações, se estiver correto vair gerar
um token JWT
FORMATO: criptografado
até o primeiro ponto => headers, qual tipo de token foi rodado, qual o tipo de criptografia
até o segundo ponto  => payload, dados adicionais, id por exemplo
até o terceiro ponto => assinatura, impossibilita o burlamento do token

/// Autenticação com JWT
Criado um sessionController
>>> yarn add jsonwebtoken
crio validações de email e senha
no model do user, faço a comparação entre a senha sendo passada com a senha armazenada no database
feitas essas verificações, retorno um token com as propriedades

MD5online -> gero um token aleatório ("8538607221f2e42284acf599214cfa34")

Por padrão, o token tem um tempo de expiração

// Separando a parte de autenticação
O código gerado pelo md5 e o tempo de expiração, forma separados em outro arquivo, na config


///Middleware de autenticação
-- Bloqueando o usuário caso ele não esteja logado
criado o método update no UserController

criar um diretório de Middleware dentro de app
o auth.js -> deve verificar se o usuário está autenticado

no Insomnia -> auth -> bearer token -> colar o token

/// Update do usuário
foram criadas validações que permitem o usuário alterar seus dados, apenas se ele estiver autenticado


// Validando dados de entrada
>>> yarn add yup //schema validation, passando através de funções o tipo de validação
Aplicados no UserController e sessionController, pois receberão os dados através do req.body


///////// Módulo 3 ///////////

//Configurando o Multer
Funcionalidade de upload de arquivos
Para mandar arquivos físicos em json, precisa de um multform part data

>>> yarn add multer
criar a pasta temp/uploads, fora da src

src/config/multer.js

no Insomnia
selecionar a opção multipart, jogar o file(nomeado na rota como 'file') e buscar por file


// Salvando o avatar no banco de dados
Quando o multer age sobre um rota, ele retorna um req.file // retorna todos os dados do arquivo

Preciso criar uma nova tabela no banco de dados
Crio o model

Crio um fileController
importo nas rotas

/// Relacionando a tabela de usuário com o file
Criando uma nova migration

No postbird foi criado um campo avatar_id, q é possível referenciar o id do file com o usuário
O id do file precisa ser salvo no banco de dados, passado através do Insomnia
O model do usuário não tem a coluna avatar_id, por isso deve ser referenciado em models de user

conectar com o banco de dados

/// Listando todos os prestadores de serviço
Crio um controller q lista(index)
Depois de retornar os valores do prestador, e name/path do avatar
Gerar a url da imagem, dentro de file
Servindo arquivos estáticos, isso no app.js, para abrir diretamente no navegador

///Criando registro de agendamento no banco de dados
Criando a migration
>>> yarn sequelize migration:create --name=create-appointments
passo como referencia o model de usuário

-criando o model
Não preciso referenciar, no super.init, os campos id/user_id, pois quando é referenciado, ele cria automaticamente

importar o model no index.js

Obs:Quando uma tabela tem relacionamento com 2 models, sou obrigado a dar apelido para o relacionamento, usando o as:

/// Criando a rota para criar o agendamento do serviço, entre usuário e prestador
Criando o controller
Se assegurar que o usuário não seja um provider
Passar o usuário com quem quer marcar
provider_id:3
data -> "date":"2019-07-01T18:00:00-03:00" (passando com a timezone)

// Validando o agendamento
Analisar se a data é futura, se já o horário está disponível

>>> yarn add date-fns@next
                     @next -> versão mais atual da biblioteca

// Listando todos os agendamentos do usuário
Criado o método index no controller

///Aplicando a paginação
Através de query, no insominia, fixar um parâmetro


/// Listando agenda do prestador
Criar o ScheduleController
Autenticar-se como provider
Fazer uma verificação, para ver se o usuario é realmente um provider
através de query, exibir o dia que quer ver os agendamentos, passar todo o formato da timezone, mas utilizar apenas a data

/// Conectando a aplicação com um banco não relacional - MongoDb
-> Dados não estruturados
-> Sem relacionamento
-> Extremamente performático

//Subindo um container, rodando o mongodb
>>> sudo docker run --name mongobarber -p 27017:27017 -d -t mongo
localhost:27017 // checar se o mongo está rodando

Para conectar a aplicação com o mongodb
>>> yarn add mongoose

no index.js, acrescentar o método mongo

// Notificando novos agendamentos
Armazenando notificações dentro do mongo

*No mongo, temos schemas e não tabela*

Dentro da pasta app - schemas
No AppointmentController

mongodb compass comunity -> interface gráfica, para visualizar os dados
deletar os agendamentos, para não interferir na criação de novos agendamentos com o mongodb

/// Listando notificações do usuário
NotificationController
Usando o método find ao invés de findAll, por conta que estamos trabalhando com mongoose

/// Marcando a notificação como lida
Buscar a notificação pelo o id da notificação
Será um método update do NotificationController
